{-# LANGUAGE FlexibleContexts #-}

daml 1.2
module SwapProposal where

-- Interface for dealing with swappable assets
class Transferrable t where
  transfer: ContractId t -> Party -> Update (ContractId t)

template (Template t, Eq t, Transferrable t) => SwapProposal t with
    proposer: Party
    proposee: Party
    offer: t
    offerCid: ContractId t
    expected: t
  where
    signatory proposer

    controller proposer can
      Withdraw: ()
        do pure ()

      ChangeOffer: ContractId (SwapProposal t)
        with
          newOffer: t
          newOfferCid: ContractId t
          newExpected: t
        do create this with
             offer = newOffer
             offerCid = newOfferCid
             expected = newExpected

    controller proposee can
      Accept: (ContractId t, ContractId t)
        with paymentCid: ContractId t
        do -- check that the offer and payment match what each party expects
           realOffer <- fetch offerCid
           assert $ realOffer == offer
           realPayment <- fetch paymentCid
           assert $ realPayment == expected
           -- exchange ownership of contracts
           proposeeNewCid <- transfer offerCid proposee
           proposerNewCid <- transfer paymentCid proposer
           return (proposeeNewCid, proposerNewCid)

      Reject: ()
        do pure ()

      RejectWithCounterOffer: ContractId (SwapProposal t)
        with
          newOffer: t
          newOfferCid: ContractId t
          newExpected: t
        do create $ SwapProposal with
             proposer = proposee
             proposee = proposer
             offer = newOffer
             offerCid = newOfferCid
             expected = newExpected

-- A couple of transferrable assets: Cash and Bricks

template Cash
  with
    owner: Party
    amount: Decimal
  where
    signatory owner

    controller owner can
      TransferCash: ContractId Cash
        with newOwner: Party
        do create $ Cash newOwner amount

template Brick
  with
    owner: Party
  where
    signatory owner

    controller owner can
      TransferBrick: ContractId Brick
        with newOwner: Party
        do create $ Brick newOwner

instance Transferrable Cash where
  transfer cid newOwner = exercise cid TransferCash with newOwner

instance Transferrable Brick where
  transfer cid newOwner = exercise cid TransferBrick with newOwner